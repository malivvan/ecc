package ecc

import (
	"bytes"
	cryptoRand "crypto/rand"
	"crypto/tls"
	"crypto/x509"
	"encoding/pem"
	"math/rand"
	"os"
	"path/filepath"
	"runtime"
	"testing"
	"time"
)

func initDeterministic() {
	runtime.GOMAXPROCS(1)
	runtime.LockOSThread()
	cryptoRand.Reader = rand.New(rand.NewSource(69))
	Organization = "Manifold"
	Validity = func() (time.Time, time.Time, time.Time, time.Time) {
		now := time.Date(2021, 1, 1, 0, 0, 0, 0, time.UTC)
		caNotBefore := time.Date(now.Year()-(now.Year()%10), time.January, 1, 0, 0, 0, 0, time.UTC)
		caNotAfter := time.Date(now.Year()-(now.Year()%10)+9, time.December, 31, 23, 59, 59, 0, time.UTC)
		certNotBefore := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC)
		certNotAfter := time.Date(now.Year(), now.Month(), now.Day(), 23, 59, 59, 0, time.UTC)
		return caNotBefore, caNotAfter, certNotBefore, certNotAfter
	}
}

func TestSignVerify(t *testing.T) {
	priv, err := Private(nil)
	if err != nil {
		t.Fatal(err)
	}
	if priv == nil {
		t.Fatal("nil private key")
	}

	pub := priv.Public()
	if pub == nil {
		t.Fatal("nil public key")
	}

	message := []byte("Hello, World!")
	signature, err := Sign(priv, message)
	if err != nil {
		t.Fatal(err)
	}
	if signature == nil {
		t.Fatal("invalid signature")
	}

	err = pub.Verify(message, signature)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExchange(t *testing.T) {
	alicePriv, err := Private(nil)
	if err != nil {
		t.Fatal(err)
	}
	if alicePriv == nil {
		t.Fatal("invalid private key")
	}

	bobPriv, err := Private(nil)
	if err != nil {
		t.Fatal(err)
	}
	if bobPriv == nil {
		t.Fatal("invalid private key")
	}

	alicePub := alicePriv.Public()
	if alicePub == nil {
		t.Fatal("invalid public key")
	}

	bobPub := bobPriv.Public()
	if bobPub == nil {
		t.Fatal("invalid public key")
	}

	aliceShared, err := alicePriv.Exchange(bobPub)
	if err != nil {
		t.Fatal(err)
	}
	if aliceShared == nil {
		t.Fatal("invalid shared key")
	}

	bobShared, err := alicePub.Exchange(bobPriv)
	if err != nil {
		t.Fatal(err)
	}
	if bobShared == nil {
		t.Fatal("invalid shared key")
	}

	if !bytes.Equal(aliceShared, bobShared) {
		t.Fatal("shared keys do not match")
	}
}

func TestCertify(t *testing.T) {
	initDeterministic()

	priv, err := Private(nil)
	if err != nil {
		t.Fatal(err)
	}
	if priv == nil {
		t.Fatal("invalid private key")
	}

	caPEM, certPEM, certKey, err := priv.Certify("localhost")
	if err != nil {
		t.Fatal(err)
	}

	caBlock, _ := pem.Decode(caPEM)
	if caBlock.Type != "CERTIFICATE" {
		t.Fatal("invalid certificate pem type")
	}
	if !bytes.Equal(caBlock.Bytes, []byte{
		0x30, 0x82, 0x01, 0xc9, 0x30, 0x82, 0x01, 0x7b, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x17, 0xef,
		0x8c, 0x63, 0xfe, 0x46, 0x1e, 0x82, 0x53, 0xa9, 0x90, 0x3b, 0xe5, 0x1d, 0xc1, 0x1b, 0x30, 0x05, 0x06,
		0x03, 0x2b, 0x65, 0x70, 0x30, 0x5a, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x08,
		0x4d, 0x61, 0x6e, 0x69, 0x66, 0x6f, 0x6c, 0x64, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03,
		0x13, 0x0b, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x6f, 0x6c, 0x64, 0x20, 0x43, 0x41, 0x31, 0x2f, 0x30, 0x2d,
		0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x26, 0x33, 0x31, 0x38, 0x31, 0x36, 0x30, 0x35, 0x30, 0x33, 0x31,
		0x31, 0x38, 0x36, 0x39, 0x34, 0x35, 0x30, 0x34, 0x30, 0x33, 0x31, 0x32, 0x39, 0x35, 0x32, 0x30, 0x37,
		0x31, 0x38, 0x32, 0x31, 0x38, 0x31, 0x31, 0x37, 0x34, 0x30, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30,
		0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x39, 0x31, 0x32,
		0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x5a, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03,
		0x55, 0x04, 0x0a, 0x13, 0x08, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x6f, 0x6c, 0x64, 0x31, 0x14, 0x30, 0x12,
		0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0b, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x6f, 0x6c, 0x64, 0x20, 0x43,
		0x41, 0x31, 0x2f, 0x30, 0x2d, 0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x26, 0x33, 0x31, 0x38, 0x31, 0x36,
		0x30, 0x35, 0x30, 0x33, 0x31, 0x31, 0x38, 0x36, 0x39, 0x34, 0x35, 0x30, 0x34, 0x30, 0x33, 0x31, 0x32,
		0x39, 0x35, 0x32, 0x30, 0x37, 0x31, 0x38, 0x32, 0x31, 0x38, 0x31, 0x31, 0x37, 0x34, 0x30, 0x33, 0x30,
		0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70, 0x03, 0x21, 0x00, 0xf0, 0x6f, 0xea, 0xe1, 0x5c, 0x51,
		0x5c, 0xbb, 0xb8, 0x4b, 0x0e, 0x23, 0x32, 0x02, 0xd9, 0x17, 0xac, 0xe2, 0x3e, 0x4c, 0xb9, 0xee, 0x3c,
		0x9d, 0x5d, 0xb5, 0x4f, 0x8b, 0x9f, 0xcc, 0xb5, 0x75, 0xa3, 0x57, 0x30, 0x55, 0x30, 0x0e, 0x06, 0x03,
		0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0x84, 0x30, 0x13, 0x06, 0x03, 0x55,
		0x1d, 0x25, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30,
		0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
		0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xd2, 0xd8, 0xee, 0x54, 0x31, 0xed, 0x26,
		0x9a, 0x50, 0xa3, 0xc1, 0xd5, 0xcc, 0xd3, 0xbf, 0x51, 0x15, 0x73, 0xea, 0x30, 0x30, 0x05, 0x06, 0x03,
		0x2b, 0x65, 0x70, 0x03, 0x41, 0x00, 0xe2, 0xcb, 0x03, 0x11, 0x95, 0xc9, 0xaa, 0xdc, 0x2a, 0xca, 0x44,
		0xa9, 0x4c, 0x51, 0x97, 0xf5, 0xdc, 0x65, 0xb1, 0x3a, 0x8b, 0xf5, 0x91, 0xf0, 0x70, 0xb9, 0x3d, 0x8a,
		0x48, 0x39, 0xdf, 0xa2, 0xc5, 0xf9, 0x14, 0x96, 0xc4, 0xb4, 0xdb, 0x56, 0xec, 0xa0, 0x3e, 0x44, 0xcc,
		0x87, 0x29, 0x03, 0xcb, 0x66, 0xdb, 0xc1, 0x15, 0xb0, 0x7e, 0x0c, 0xb7, 0x8f, 0x53, 0x65, 0x19, 0xcb,
		0x6b, 0x08,
	}) {
		t.Fatal("invalid certificate pem data")
	}

	ca, err := x509.ParseCertificate(caBlock.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	if ca.SerialNumber.String() != "31816050311869450403129520718218117403" {
		t.Fatal("invalid certificate serial number")
	}
	if ca.Subject.SerialNumber != "31816050311869450403129520718218117403" {
		t.Fatal("invalid certificate subject serial number")
	}

	certBlock, _ := pem.Decode(caPEM)
	if certBlock.Type != "CERTIFICATE" {
		t.Fatal("invalid certificate pem type")
	}
	cert, err := x509.ParseCertificate(certBlock.Bytes)
	if err != nil {
		t.Fatal(err)
	}

	err = cert.CheckSignatureFrom(ca)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tls.X509KeyPair(certPEM, certKey)
	if err != nil {
		t.Fatal(err)
	}
}

func TestGetKeyData(t *testing.T) {
	testPath := filepath.Join(os.TempDir(), "ecc_test")
	defer func() {
		_ = os.Remove(testPath)
	}()
	err := os.WriteFile(testPath, []byte("test"), 0600)
	if err != nil {
		t.Fatal(err)
	}
	testFile, err := os.Open(testPath)
	if err != nil {
		t.Fatal(err)
	}
	testFileHandle := testFile.Fd()
	for _, testCase := range []struct {
		name string
		key  any
		data []byte
	}{
		{name: "nil", key: nil, data: nil},
		{name: "bytes", key: []byte("test"), data: []byte("test")},
		{name: "string", key: "test", data: []byte("test")},
		{name: "reader", key: bytes.NewReader([]byte("test")), data: []byte("test")},
		{name: "file", key: testFile, data: []byte("test")},
	} {
		t.Run(testCase.name, func(t *testing.T) {
			if !bytes.Equal(testCase.data, getKeyData(testCase.key)) {
				t.Fatal("invalid key data")
			}
		})
	}
	if testFileHandle == testFile.Fd() {
		t.Fatal("file not closed")
	}
}
